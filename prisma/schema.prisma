// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester{
  id String @id @default(uuid())
  year Int
  title String
  code String
  startMonth String
  endMonth String
  students Student[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  semesterRegistrations SemesterRegistration[]
  @@map("academic_semesters")
}

model AcademicFaculty{
  id String @id @default(uuid())
  title String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  academicDepartments AcademicDepartment[]
  faculties Faculty[]
  students Student[]
  @@map("academic_faculties")
}

model AcademicDepartment{
  id String @id @default(uuid())
  title String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  academicFacultyId String
  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId],references: [id]) 
  faculties Faculty[]
  students Student[]
  @@map("academic_departments")
}

model Student{
  id String @id @default(uuid())
  studentId String
  firstName String
  lastName String
  middleName String
  profileImage String
  email String
  contactNo String
  gender String
  bloodGroup String
  academicSemesterId String
  academicSemester AcademicSemester @relation(fields: [academicSemesterId],references: [id])
  academicDepartmentId String
  academicDepartment AcademicDepartment @relation(fields: [academicDepartmentId],references: [id])
  academicFacultyId String
  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId],references: [id])  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("students")
}

model Faculty{
  id String @id @default(uuid())
  facultyId String
  firstName String
  lastName String
  middleName String
  profileImage String
  email String
  contactNo String
  gender String
  bloodGroup String
  designation String

  academicDepartmentId String
  academicDepartment AcademicDepartment @relation(fields: [academicDepartmentId],references: [id])

  academicFacultyId String
  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId],references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courses CourseFaculty[]

  @@map("faculties")
}

model Building{
  id String @id @default(uuid())
  title String
  rooms Room[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("buildings")
}

model Room{
  id String @id @default(uuid())
  roomNumber String 
  floor String
  buildingId String
  building Building @relation(fields: [buildingId],references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("rooms")
}
model Course{
  id String @id @default(uuid())
  title String
  code String
  credits Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  preRequsite CourseToPrerequisite[] @relation("CourseToPrerequisite")
  preRequsiteFor CourseToPrerequisite[] @relation("PrerequisiteToCourse")
  faculties CourseFaculty[]
  @@map("courses")
}

model CourseToPrerequisite{
  courseId String
  preRequisiteId String

  course Course @relation(fields: [courseId],references: [id],name:"CourseToPrerequisite")
  
  preRequisite Course @relation(fields: [preRequisiteId],references: [id],name:"PrerequisiteToCourse")

  @@id([courseId,preRequisiteId])
}

model CourseFaculty {
  courseId String
  course Course @relation(fields: [courseId],references: [id])

  facultyId String
  faculty Faculty @relation(fields: [facultyId],references: [id])

  @@id([courseId,facultyId])
  @@map("course_faculties")
}

model SemesterRegistration {
  id String @id @default(uuid())
  startDate DateTime
  endDate DateTime
  status SemesterRegistrationStatus? @default(UPCOMING)
  minCredit Int @default(0)
  maxCredit Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  academicSemesterId String 
  academicSemester AcademicSemester @relation(fields: [academicSemesterId],references: [id])
  @@map("semester_registrations")
}

enum SemesterRegistrationStatus{
  UPCOMING
  ONGOING
  ENDED
}